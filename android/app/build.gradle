def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def fetchDebugKeystore = tasks.register('fetchDebugKeystore') {
    doLast {
        def ks = file('debug.keystore')
        if (!ks.exists()) {
            exec {
                commandLine 'gcloud', 'secrets', 'versions', 'access', 'latest', '--secret=photowordfind-debug-keystore'
                standardOutput = new FileOutputStream(ks)
            }
        }
    }
}

def bootstrapFlag = rootProject.file('.bootstrap_complete')
def runBootstrap = tasks.register('runBootstrap') {
    doLast {
        if (!bootstrapFlag.exists()) {
            println 'Running bootstrap script...'
            exec {
                commandLine 'powershell', '-ExecutionPolicy', 'Bypass', "${rootProject.rootDir}/scripts/bootstrap.ps1"
            }
        }
    }
}

android {
    compileSdk 34

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.PhotoWordFind"
        minSdkVersion 22
        targetSdkVersion 29
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(17))
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

preBuild.dependsOn(runBootstrap)
preBuild.dependsOn(fetchDebugKeystore)
